/*
Auto Generated by yeoman streamrail-go
  _________ __                               __________        .__.__
 /   _____//  |________   ____ _____    _____\______   \_____  |__|  |
 \_____  \\   __\_  __ \_/ __ \\__  \  /     \|       _/\__  \ |  |  |
 /        \|  |  |  | \/\  ___/ / __ \|  Y Y  \    |   \ / __ \|  |  |__
/_______  /|__|  |__|    \___  >____  /__|_|  /____|_  /(____  /__|____/
        \/                   \/     \/      \/       \/      \/
*/

package main

import (
	"log"
	"time"

	"github.com/gorilla/mux"
	auth "github.com/streamrail/go-http-auth"
	"github.com/streamrail/watchdog/watchers"
	"net/http"
)

var (
	secrets  = auth.HtpasswdFileProvider("/etc/.htpasswd")
	certFile = "./certs/public.pem"
	keyFile  = "./certs/private.pem"
)

const (
	// configPath       = "./configurations/"
	configPath       = "/etc/configurations/"
	logglyToken      = "7b0d8c82-af5d-43b7-9489-0bf160bff5b1"
	component        = "watchdog"
	logglySamlpeRate = 100
)

func init() {
	log.Println(JSON{"event": "init"})
}

func main() {

	config, err := NewConfigParser(configPath)
	if err != nil {
		// kill server if config isn't right
		log.Fatal(err.Error())
	}
	dispatcher := watchers.NewDispatcher()
	dispatcher.Listen()
	Schedule(dispatcher, config)

	authenticator := auth.NewBasicAuthenticator("streamrail.com", secrets)
	r := mux.NewRouter().StrictSlash(false)
	r.PathPrefix("/").Handler(http.FileServer(http.Dir("static")))
	http.Handle("/", authenticator.Wrap(func(w http.ResponseWriter, ar *auth.AuthenticatedRequest) {
		r.ServeHTTP(w, &ar.Request)
	}))
	http.Handle("/api/status", authenticator.Wrap(func(w http.ResponseWriter, ar *auth.AuthenticatedRequest) {
		w.Header().Add("Access-Control-Allow-Origin", "*")
		w.Write(dispatcher.GetReportsValueJson())
	}))
	s := &http.Server{
		Addr:           ":8080",
		ReadTimeout:    10 * time.Second,
		WriteTimeout:   10 * time.Second,
		MaxHeaderBytes: 1 << 20,
	}

	log.Fatal(JSON{"error": s.ListenAndServe().Error()})
}
